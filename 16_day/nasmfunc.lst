     1                                  GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
     2                                  GLOBAL	io_in8,  io_in16, io_in32
     3                                  GLOBAL	io_out8, io_out16, io_out32
     4                                  GLOBAL	io_load_eflags, io_store_eflags
     5                                  GLOBAL	load_gdtr, load_idtr
     6                                  GLOBAL	load_cr0, store_cr0
     7                                  GLOBAL	load_tr
     8                                  GLOBAL	asm_inthandler20, asm_inthandler21
     9                                  GLOBAL	asm_inthandler27, asm_inthandler2c
    10                                  GLOBAL	memtest_sub
    11                                  GLOBAL	farjmp
    12                                  EXTERN	inthandler20, inthandler21
    13                                  EXTERN	inthandler27, inthandler2c
    14                                  
    15                                  io_hlt:	; void io_hlt(void);
    16 00000000 F4                      		HLT
    17 00000001 C3                      		RET
    18                                  
    19                                  io_cli:	; void io_cli(void);
    20 00000002 FA                      		CLI
    21 00000003 C3                      		RET
    22                                  
    23                                  io_sti:	; void io_sti(void);
    24 00000004 FB                      		STI
    25 00000005 C3                      		RET
    26                                  
    27                                  io_stihlt:	; void io_stihlt(void);
    28 00000006 FB                      		STI
    29 00000007 F4                      		HLT
    30 00000008 C3                      		RET
    31                                  
    32                                  io_in8:	; int io_in8(int port);
    33 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    34 0000000D B800000000              		MOV		EAX,0
    35 00000012 EC                      		IN		AL,DX
    36 00000013 C3                      		RET
    37                                  
    38                                  io_in16:	; int io_in16(int port);
    39 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    40 00000018 B800000000              		MOV		EAX,0
    41 0000001D 66ED                    		IN		AX,DX
    42 0000001F C3                      		RET
    43                                  
    44                                  io_in32:	; int io_in32(int port);
    45 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    46 00000024 ED                      		IN		EAX,DX
    47 00000025 C3                      		RET
    48                                  
    49                                  io_out8:	; void io_out8(int port, int data);
    50 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    51 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    52 0000002E EE                      		OUT		DX,AL
    53 0000002F C3                      		RET
    54                                  
    55                                  io_out16:	; void io_out16(int port, int data);
    56 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    57 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    58 00000038 66EF                    		OUT		DX,AX
    59 0000003A C3                      		RET
    60                                  
    61                                  io_out32:	; void io_out32(int port, int data);
    62 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    63 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    64 00000043 EF                      		OUT		DX,EAX
    65 00000044 C3                      		RET
    66                                  
    67                                  io_load_eflags:	; int io_load_eflags(void);
    68 00000045 9C                      		PUSHFD		; PUSH EFLAGS という意味
    69 00000046 58                      		POP		EAX
    70 00000047 C3                      		RET
    71                                  
    72                                  io_store_eflags:	; void io_store_eflags(int eflags);
    73 00000048 8B442404                		MOV		EAX,[ESP+4]
    74 0000004C 50                      		PUSH	EAX
    75 0000004D 9D                      		POPFD		; POP EFLAGS という意味
    76 0000004E C3                      		RET
    77                                  
    78                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    79 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    80 00000054 6689442406              		MOV		[ESP+6],AX
    81 00000059 0F01542406              		LGDT	[ESP+6]
    82 0000005E C3                      		RET
    83                                  
    84                                  load_idtr:		; void load_idtr(int limit, int addr);
    85 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    86 00000064 6689442406              		MOV		[ESP+6],AX
    87 00000069 0F015C2406              		LIDT	[ESP+6]
    88 0000006E C3                      		RET
    89                                  
    90                                  load_cr0:		; int load_cr0(void);
    91 0000006F 0F20C0                  		MOV		EAX,CR0
    92 00000072 C3                      		RET
    93                                  
    94                                  store_cr0:		; void store_cr0(int cr0);
    95 00000073 8B442404                		MOV		EAX,[ESP+4]
    96 00000077 0F22C0                  		MOV		CR0,EAX
    97 0000007A C3                      		RET
    98                                  
    99                                  load_tr:		; void load_tr(int tr);
   100 0000007B 0F005C2404              		LTR		[ESP+4]			; tr
   101 00000080 C3                      		RET
   102                                  
   103                                  asm_inthandler20:
   104 00000081 06                      		PUSH	ES
   105 00000082 1E                      		PUSH	DS
   106 00000083 60                      		PUSHAD
   107 00000084 89E0                    		MOV		EAX,ESP
   108 00000086 50                      		PUSH	EAX
   109 00000087 668CD0                  		MOV		AX,SS
   110 0000008A 8ED8                    		MOV		DS,AX
   111 0000008C 8EC0                    		MOV		ES,AX
   112 0000008E E8(00000000)            		CALL	inthandler20
   113 00000093 58                      		POP		EAX
   114 00000094 61                      		POPAD
   115 00000095 1F                      		POP		DS
   116 00000096 07                      		POP		ES
   117 00000097 CF                      		IRETD
   118                                  
   119                                  asm_inthandler21:
   120 00000098 06                      		PUSH	ES
   121 00000099 1E                      		PUSH	DS
   122 0000009A 60                      		PUSHAD
   123 0000009B 89E0                    		MOV		EAX,ESP
   124 0000009D 50                      		PUSH	EAX
   125 0000009E 668CD0                  		MOV		AX,SS
   126 000000A1 8ED8                    		MOV		DS,AX
   127 000000A3 8EC0                    		MOV		ES,AX
   128 000000A5 E8(00000000)            		CALL	inthandler21
   129 000000AA 58                      		POP		EAX
   130 000000AB 61                      		POPAD
   131 000000AC 1F                      		POP		DS
   132 000000AD 07                      		POP		ES
   133 000000AE CF                      		IRETD
   134                                  
   135                                  asm_inthandler27:
   136 000000AF 06                      		PUSH	ES
   137 000000B0 1E                      		PUSH	DS
   138 000000B1 60                      		PUSHAD
   139 000000B2 89E0                    		MOV		EAX,ESP
   140 000000B4 50                      		PUSH	EAX
   141 000000B5 668CD0                  		MOV		AX,SS
   142 000000B8 8ED8                    		MOV		DS,AX
   143 000000BA 8EC0                    		MOV		ES,AX
   144 000000BC E8(00000000)            		CALL	inthandler27
   145 000000C1 58                      		POP		EAX
   146 000000C2 61                      		POPAD
   147 000000C3 1F                      		POP		DS
   148 000000C4 07                      		POP		ES
   149 000000C5 CF                      		IRETD
   150                                  
   151                                  asm_inthandler2c:
   152 000000C6 06                      		PUSH	ES
   153 000000C7 1E                      		PUSH	DS
   154 000000C8 60                      		PUSHAD
   155 000000C9 89E0                    		MOV		EAX,ESP
   156 000000CB 50                      		PUSH	EAX
   157 000000CC 668CD0                  		MOV		AX,SS
   158 000000CF 8ED8                    		MOV		DS,AX
   159 000000D1 8EC0                    		MOV		ES,AX
   160 000000D3 E8(00000000)            		CALL	inthandler2c
   161 000000D8 58                      		POP		EAX
   162 000000D9 61                      		POPAD
   163 000000DA 1F                      		POP		DS
   164 000000DB 07                      		POP		ES
   165 000000DC CF                      		IRETD
   166                                  
   167                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   168 000000DD 57                      		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   169 000000DE 56                      		PUSH	ESI
   170 000000DF 53                      		PUSH	EBX
   171 000000E0 BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   172 000000E5 BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   173 000000EA 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   174                                  mts_loop:
   175 000000EE 89C3                    		MOV		EBX,EAX
   176 000000F0 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   177 000000F6 8B13                    		MOV		EDX,[EBX]				; old = *p;
   178 000000F8 8933                    		MOV		[EBX],ESI				; *p = pat0;
   179 000000FA 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   180 000000FD 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   181 000000FF 7518                    		JNE		mts_fin
   182 00000101 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   183 00000104 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   184 00000106 7511                    		JNE		mts_fin
   185 00000108 8913                    		MOV		[EBX],EDX				; *p = old;
   186 0000010A 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   187 0000010F 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   188 00000113 76D9                    		JBE		mts_loop
   189 00000115 5B                      		POP		EBX
   190 00000116 5E                      		POP		ESI
   191 00000117 5F                      		POP		EDI
   192 00000118 C3                      		RET
   193                                  mts_fin:
   194 00000119 8913                    		MOV		[EBX],EDX				; *p = old;
   195 0000011B 5B                      		POP		EBX
   196 0000011C 5E                      		POP		ESI
   197 0000011D 5F                      		POP		EDI
   198 0000011E C3                      		RET
   199                                  
   200                                  farjmp:		; void farjmp(int eip, int cs);
   201 0000011F FF6C2404                		JMP		FAR	[ESP+4]				; eip, cs
   202 00000123 C3                      		RET
