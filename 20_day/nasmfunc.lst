     1                                  GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
     2                                  GLOBAL	io_in8,  io_in16, io_in32
     3                                  GLOBAL	io_out8, io_out16, io_out32
     4                                  GLOBAL	io_load_eflags, io_store_eflags
     5                                  GLOBAL	load_gdtr, load_idtr
     6                                  GLOBAL	load_cr0, store_cr0
     7                                  GLOBAL	load_tr
     8                                  GLOBAL	asm_inthandler20, asm_inthandler21
     9                                  GLOBAL	asm_inthandler27, asm_inthandler2c
    10                                  GLOBAL	memtest_sub
    11                                  GLOBAL	farjmp, farcall
    12                                  GLOBAL	asm_cons_putchar
    13                                  EXTERN	inthandler20, inthandler21
    14                                  EXTERN	inthandler27, inthandler2c
    15                                  EXTERN	cons_putchar
    16                                  
    17                                  io_hlt:	; void io_hlt(void);
    18 00000000 F4                      		HLT
    19 00000001 C3                      		RET
    20                                  
    21                                  io_cli:	; void io_cli(void);
    22 00000002 FA                      		CLI
    23 00000003 C3                      		RET
    24                                  
    25                                  io_sti:	; void io_sti(void);
    26 00000004 FB                      		STI
    27 00000005 C3                      		RET
    28                                  
    29                                  io_stihlt:	; void io_stihlt(void);
    30 00000006 FB                      		STI
    31 00000007 F4                      		HLT
    32 00000008 C3                      		RET
    33                                  
    34                                  io_in8:	; int io_in8(int port);
    35 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    36 0000000D B800000000              		MOV		EAX,0
    37 00000012 EC                      		IN		AL,DX
    38 00000013 C3                      		RET
    39                                  
    40                                  io_in16:	; int io_in16(int port);
    41 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    42 00000018 B800000000              		MOV		EAX,0
    43 0000001D 66ED                    		IN		AX,DX
    44 0000001F C3                      		RET
    45                                  
    46                                  io_in32:	; int io_in32(int port);
    47 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    48 00000024 ED                      		IN		EAX,DX
    49 00000025 C3                      		RET
    50                                  
    51                                  io_out8:	; void io_out8(int port, int data);
    52 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    53 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    54 0000002E EE                      		OUT		DX,AL
    55 0000002F C3                      		RET
    56                                  
    57                                  io_out16:	; void io_out16(int port, int data);
    58 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    59 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    60 00000038 66EF                    		OUT		DX,AX
    61 0000003A C3                      		RET
    62                                  
    63                                  io_out32:	; void io_out32(int port, int data);
    64 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    65 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    66 00000043 EF                      		OUT		DX,EAX
    67 00000044 C3                      		RET
    68                                  
    69                                  io_load_eflags:	; int io_load_eflags(void);
    70 00000045 9C                      		PUSHFD		; PUSH EFLAGS という意味
    71 00000046 58                      		POP		EAX
    72 00000047 C3                      		RET
    73                                  
    74                                  io_store_eflags:	; void io_store_eflags(int eflags);
    75 00000048 8B442404                		MOV		EAX,[ESP+4]
    76 0000004C 50                      		PUSH	EAX
    77 0000004D 9D                      		POPFD		; POP EFLAGS という意味
    78 0000004E C3                      		RET
    79                                  
    80                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    81 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    82 00000054 6689442406              		MOV		[ESP+6],AX
    83 00000059 0F01542406              		LGDT	[ESP+6]
    84 0000005E C3                      		RET
    85                                  
    86                                  load_idtr:		; void load_idtr(int limit, int addr);
    87 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    88 00000064 6689442406              		MOV		[ESP+6],AX
    89 00000069 0F015C2406              		LIDT	[ESP+6]
    90 0000006E C3                      		RET
    91                                  
    92                                  load_cr0:		; int load_cr0(void);
    93 0000006F 0F20C0                  		MOV		EAX,CR0
    94 00000072 C3                      		RET
    95                                  
    96                                  store_cr0:		; void store_cr0(int cr0);
    97 00000073 8B442404                		MOV		EAX,[ESP+4]
    98 00000077 0F22C0                  		MOV		CR0,EAX
    99 0000007A C3                      		RET
   100                                  
   101                                  load_tr:		; void load_tr(int tr);
   102 0000007B 0F005C2404              		LTR		[ESP+4]			; tr
   103 00000080 C3                      		RET
   104                                  
   105                                  asm_inthandler20:
   106 00000081 06                      		PUSH	ES
   107 00000082 1E                      		PUSH	DS
   108 00000083 60                      		PUSHAD
   109 00000084 89E0                    		MOV		EAX,ESP
   110 00000086 50                      		PUSH	EAX
   111 00000087 668CD0                  		MOV		AX,SS
   112 0000008A 8ED8                    		MOV		DS,AX
   113 0000008C 8EC0                    		MOV		ES,AX
   114 0000008E E8(00000000)            		CALL	inthandler20
   115 00000093 58                      		POP		EAX
   116 00000094 61                      		POPAD
   117 00000095 1F                      		POP		DS
   118 00000096 07                      		POP		ES
   119 00000097 CF                      		IRETD
   120                                  
   121                                  asm_inthandler21:
   122 00000098 06                      		PUSH	ES
   123 00000099 1E                      		PUSH	DS
   124 0000009A 60                      		PUSHAD
   125 0000009B 89E0                    		MOV		EAX,ESP
   126 0000009D 50                      		PUSH	EAX
   127 0000009E 668CD0                  		MOV		AX,SS
   128 000000A1 8ED8                    		MOV		DS,AX
   129 000000A3 8EC0                    		MOV		ES,AX
   130 000000A5 E8(00000000)            		CALL	inthandler21
   131 000000AA 58                      		POP		EAX
   132 000000AB 61                      		POPAD
   133 000000AC 1F                      		POP		DS
   134 000000AD 07                      		POP		ES
   135 000000AE CF                      		IRETD
   136                                  
   137                                  asm_inthandler27:
   138 000000AF 06                      		PUSH	ES
   139 000000B0 1E                      		PUSH	DS
   140 000000B1 60                      		PUSHAD
   141 000000B2 89E0                    		MOV		EAX,ESP
   142 000000B4 50                      		PUSH	EAX
   143 000000B5 668CD0                  		MOV		AX,SS
   144 000000B8 8ED8                    		MOV		DS,AX
   145 000000BA 8EC0                    		MOV		ES,AX
   146 000000BC E8(00000000)            		CALL	inthandler27
   147 000000C1 58                      		POP		EAX
   148 000000C2 61                      		POPAD
   149 000000C3 1F                      		POP		DS
   150 000000C4 07                      		POP		ES
   151 000000C5 CF                      		IRETD
   152                                  
   153                                  asm_inthandler2c:
   154 000000C6 06                      		PUSH	ES
   155 000000C7 1E                      		PUSH	DS
   156 000000C8 60                      		PUSHAD
   157 000000C9 89E0                    		MOV		EAX,ESP
   158 000000CB 50                      		PUSH	EAX
   159 000000CC 668CD0                  		MOV		AX,SS
   160 000000CF 8ED8                    		MOV		DS,AX
   161 000000D1 8EC0                    		MOV		ES,AX
   162 000000D3 E8(00000000)            		CALL	inthandler2c
   163 000000D8 58                      		POP		EAX
   164 000000D9 61                      		POPAD
   165 000000DA 1F                      		POP		DS
   166 000000DB 07                      		POP		ES
   167 000000DC CF                      		IRETD
   168                                  
   169                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   170 000000DD 57                      		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   171 000000DE 56                      		PUSH	ESI
   172 000000DF 53                      		PUSH	EBX
   173 000000E0 BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   174 000000E5 BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   175 000000EA 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   176                                  mts_loop:
   177 000000EE 89C3                    		MOV		EBX,EAX
   178 000000F0 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   179 000000F6 8B13                    		MOV		EDX,[EBX]				; old = *p;
   180 000000F8 8933                    		MOV		[EBX],ESI				; *p = pat0;
   181 000000FA 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   182 000000FD 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   183 000000FF 7518                    		JNE		mts_fin
   184 00000101 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   185 00000104 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   186 00000106 7511                    		JNE		mts_fin
   187 00000108 8913                    		MOV		[EBX],EDX				; *p = old;
   188 0000010A 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   189 0000010F 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   190 00000113 76D9                    		JBE		mts_loop
   191 00000115 5B                      		POP		EBX
   192 00000116 5E                      		POP		ESI
   193 00000117 5F                      		POP		EDI
   194 00000118 C3                      		RET
   195                                  mts_fin:
   196 00000119 8913                    		MOV		[EBX],EDX				; *p = old;
   197 0000011B 5B                      		POP		EBX
   198 0000011C 5E                      		POP		ESI
   199 0000011D 5F                      		POP		EDI
   200 0000011E C3                      		RET
   201                                  
   202                                  farjmp:		; void farjmp(int eip, int cs);
   203 0000011F FF6C2404                		JMP		FAR	[ESP+4]				; eip, cs
   204 00000123 C3                      		RET
   205                                  
   206                                  farcall:		; void farcall(int eip, int cs);
   207 00000124 FF5C2404                		CALL	FAR	[ESP+4]				; eip, cs
   208 00000128 C3                      		RET
   209                                  
   210                                  asm_cons_putchar:
   211 00000129 FB                      		STI
   212 0000012A 6A01                    		PUSH	1
   213 0000012C 25FF000000              		AND		EAX,0xff	; AHやEAXの上位を0にして、EAXに文字コードが入った状態にする。
   214 00000131 50                      		PUSH	EAX
   215 00000132 FF35EC0F0000            		PUSH	DWORD [0x0fec]	; メモリの内容を読み込んでその値をPUSHする
   216 00000138 E8(00000000)            		CALL	cons_putchar
   217 0000013D 83C40C                  		ADD		ESP,12		; スタックに積んだデータを捨てる
   218 00000140 CF                      		IRETD
